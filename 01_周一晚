
在访问PHP类中的成员变量或方法时，如果被引用的变量或者方法被声明成 const（ 定义常量 ）或者 static（声明静态）,那么就必须使用操作符  ::

如果被引用的变量或者方法没有被声明成const或者static,那么就必须使用操作符->

如果从  类的内部   访问  const或者static变量  或者方法,那么就必须使用自引用的self

如果从  类的内部   访问 不为 const或者static变量或者方法,那么就必须使用自引用的$this


php 调用本身类  self :: / $this

 self::$redisUseCount

 $this-> swooleProxy
 
 2.
  isset — 检测变量是否已设置并且非 NULL b 

	public function hasC($c){  // isset 相当于判断该值不为null 且该值有值  有值返回true 无值返回false
		return isset($this->apiFuncs[$c]);
	}
 
 unset() 销毁指定的变量。
 注意在 PHP 3 中，unset() 将返回 TRUE（实际上是整型值 1），而在 PHP 4 中，unset() 不再是一个真正的函数：它现在是一个语句。
 这样就没有了返回值，试图获取 unset() 的返回值将导致解析错误。
  
  foreach 可以遍历数组与对象，它会把当前单元的键名也会在每次循环中被赋给变量 $key，值赋给变量$val
  
  $row=array('one'=>1,'two'=>2);
  
   => //  表示键值对
  一般用于数组的 键=>值
  
  
  foreach($row as $key=>$val){ //
    echo $key.'--'.$val;
  }
  
  第一次遍历的$key是one，$val是1；
  第二次遍历的$key是two，$val是2；
  
  
  array_search() 函数在数组中搜索某个键值，并返回对应的键名。
  array_search() 函数与 in_array() 一样，在数组中查找一个键值。
  如果找到了该值，匹配元素的键名会被返回。如果没找到，则返回 false
  
  in_array() 函数搜索数组中是否存在指定的值。
  
  in_array("Mark", $people)  在$people 数组中找 "Mark"
  找到返回true  没找到返回false
  
  is_array() 函数用于检测变量是否是数组，
  这个函数尤其会用于一些安全性检查方面（如表单或 SESSION 检查等
  

   $arr_age = array(18, 20, 25);
   is_array($arr_age)  
   array，则返回 TRUE，否则返回 FALSE 
  
    is_object:检测变量是否是一个对象
    var 是一个 object 则返回 TRUE，否则返回 FALSE
  
      is_bool()、 是否是布尔值
      is_int()、 是否是整数类型（ is_integer()  is_int的别名）
      is_float()、 判断是否是浮点数
      is_string()  判断是否是字符串
 
  
  json_decode ( string $json [, bool $assoc ] )    assoc 当该参数为 TRUE 时，将返回 array 而非 object 。
  接受一个 JSON 格式的字符串并且把它转换为 PHP 变量 
  
  json_decode($data,true)输出的一个关联数组,由此可知json_decode($data）输出的是对象,
  而json_decode("$arr",true)是把它强制生成PHP关联数组. 

  $arr = array ('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5); 
  echo json_encode($arr); 
  {"a":1,"b":2,"c":3,"d":4,"e":5} 
  
  
  json_encode()和json_decode()是编译和反编译过程，注意json只接受utf-8编码的字符，所以json_encode()的参数必须是utf-8编码，否则会得到空字符或者null。
  
  
  preg_match() 函数用于进行正则表达式匹配，成功返回 1 ，否则返回 0 。
  
  preg_match("/php/i", "PHP is the web scripting language of choice.", $matches)
  
  
  preg_match() 第一次匹配成功后就会停止匹配，如果要实现全部结果的匹配，即搜索到subject结尾处，
  则需使用 preg_match_all() 函数。
  
  reg_match_all() 函数用于进行正则表达式全局匹配，成功返回整个模式匹配的次数（可能为零），如果出错返回 FALSE 。
  
